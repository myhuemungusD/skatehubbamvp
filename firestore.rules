rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthed() { return request.auth != null; }
    function isOwner(uid) { return isAuthed() && request.auth.uid == uid; }
    function isGamePlayer(game) {
      return isAuthed() &&
        (game.data.players.A.uid == request.auth.uid ||
         game.data.players.B.uid == request.auth.uid);
    }

    match /users/{uid} {
      allow read: if isAuthed();
      allow create: if isOwner(uid);
      allow update: if isOwner(uid)
        && request.resource.data.diff(resource.data).changedKeys().hasOnly([
          'handle','bio','avatarUrl','stats','updatedAt'
        ]);
      allow delete: if false;
    }

    match /leads/{id} {
      allow create: if request.resource.data.keys().hasOnly(['email','source','createdAt']);
      allow read, update, delete: if false;
    }

    match /challenges/{cid} {
      allow read: if true;

      allow create: if isAuthed()
        && request.resource.data.challengerUid == request.auth.uid
        && request.resource.data.keys().hasOnly([
          'challengerUid','opponentUid','trick','status',
          'createdAt','updatedAt','expiresAt',
          'challengerClipId','opponentClipId','winnerUid'
        ])
        && request.resource.data.status in ['pending','live']
        && request.resource.data.createdAt is timestamp
        && request.resource.data.updatedAt is timestamp
        && request.resource.data.expiresAt is timestamp
        && request.resource.data.winnerUid == null;

      allow update: if isAuthed()
        && request.resource.data.keys().hasOnly([
          'status','updatedAt','challengerClipId','opponentClipId','winnerUid','opponentUid'
        ])
        && request.resource.data.updatedAt > resource.data.updatedAt
        && (
          (request.resource.data.challengerClipId == resource.data.challengerClipId
            || request.auth.uid == resource.data.challengerUid)
          &&
          (request.resource.data.opponentClipId == resource.data.opponentClipId
            || request.auth.uid == resource.data.opponentUid)
        )
        && (
          (resource.data.winnerUid == null && request.resource.data.winnerUid in
            [resource.data.challengerUid, resource.data.opponentUid])
          || (request.resource.data.winnerUid == resource.data.winnerUid)
        )
        && (
          (request.resource.data.opponentUid == resource.data.opponentUid) ||
          (resource.data.opponentUid == null && request.resource.data.opponentUid == request.auth.uid)
        );

      allow delete: if false;
    }

    match /clips/{clipId} {
      allow read: if true;
      allow create: if isOwner(request.resource.data.ownerUid)
        && request.resource.data.keys().hasOnly([
          'ownerUid','challengeId','storagePath','durationMs','thumbUrl','createdAt'
        ])
        && request.resource.data.createdAt is timestamp;
      allow update, delete: if false;
    }

    match /logs/{id} {
      allow create: if isAuthed();
      allow read, update, delete: if false;
    }

    match /games/{gameId} {
      allow create: if isAuthed();
      allow read: if isGamePlayer(resource);
      allow update: if isGamePlayer(resource)
        && request.resource.data.diff(resource.data).changedKeys()
           .hasOnly(['turn','letters','winner','players','status']);
      allow delete: if false;
      match /tricks/{trickId} {
        allow create, read: if isGamePlayer(
          get(/databases/$(database)/documents/games/$(gameId))
        );
        allow update, delete: if false;
      }
    }
  }
}